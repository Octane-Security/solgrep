/** Declaration file generated by dts-gen */

export class SolGrep {
    constructor(...args: any[]);

    analyzeDir(...args: any[]): void;

    analyzeDirQueue(...args: any[]): void;

    analyzeFile(...args: any[]): void;

    close(...args: any[]): void;

    notify(...args: any[]): void;

    notifyRules(...args: any[]): void;

    report(...args: any[]): void;

}

export namespace rules {
    class DupeFinder {
        constructor(...args: any[]);

        onClose(...args: any[]): void;

        onDirAnalyzed(...args: any[]): void;

        onProcess(...args: any[]): void;

        static description: string;

    }

    class GenericGrep {
        constructor(...args: any[]);

        onProcess(...args: any[]): void;

        static description: string;

    }

    class IsInitializable {
        constructor(...args: any[]);

        onProcess(...args: any[]): void;

        static description: string;

    }

    class IsMultipleBalanceOfSameFunc {
        constructor(...args: any[]);

        onProcess(...args: any[]): void;

        static description: string;

    }

    class Stats {
        constructor(...args: any[]);

        onClose(...args: any[]): void;

        onDirAnalyzed(...args: any[]): void;

        onProcess(...args: any[]): void;

        static description: string;

    }

}

export namespace solidity {
    class Contract {
        constructor(...args: any[]);

        getFunctions(...args: any[]): FunctionDef[];

        getSource(...args: any[]): string;

        toJSON(...args: any[]): void;

    }

    class FunctionDef {
        constructor(...args: any[]);

        callsTo(...args: any[]): void;

        getFunctionCalls(...args: any[]): void;

        getName(...args: any[]): string;

        getSource(...args: any[]): string;

    }

    class SourceUnit {
        constructor(...args: any[]);

        clone(...args: any[]): void;

        fromFile(...args: any[]): void;

        fromSource(...args: any[]): void;

        getContracts(...args: any[]): Contract[];

        getSource(...args: any[]): string;

        parseAst(...args: any[]): void;

        toJSON(...args: any[]): void;

        static getFileContent(...args: any[]): void;

    }

}

